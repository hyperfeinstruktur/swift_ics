import numpy as np
from matplotlib import pyplot as plt
from read_snapshot import *
import argparse
from scipy.optimize import curve_fit

parser = argparse.ArgumentParser(description="Check the potential generated by the particles")
parser.add_argument("file",type=str,help="Name of the snapshot file to be imaged")
parser.add_argument("--notex",action='store_true')
parser.add_argument("-r0",type=float,default=10,help="Scale Radius initial guess")
parser.add_argument("-v0",type=float,default=100,help="Circular velocity initial guess")
parser.add_argument("-aid",type=int,default=0,help="ID below which particles are passive")

args = parser.parse_args()
fname = str(args.file)

tex = not args.notex
if tex: plt.rcParams.update({"text.usetex": tex,'font.size':14,'font.family': 'serif'})
else: plt.rcParams.update({'font.size':12})
shift = 1000.
active_id_start = args.aid
figsize = 6

# Snapshot
sn = snapshot(fname)
pos = sn.pos[sn.IDs>=active_id_start] - 1000.
x = pos[:,0]
y = pos[:,1]
r = np.sqrt(np.sum(pos**2,1))
pot = sn.pot
time = sn.time_Myr()

# Analytical Potential
G = 4.299581e+04
rsp = np.logspace(np.log10(np.amin(r)),np.log10(np.amax(r)),200)
def Phi(r,v0,r0): # par = [v0,r0]
    return v0**2 * np.log(r/r0)

# Fit
params = curve_fit(Phi,r,pot,p0=[args.v0,args.r0],bounds=([0.0,0.0],[1000,1000]))
v0fit = params[0][0]
r0fit = params[0][1]
perr = np.sqrt(np.diag(params[1]))

# Plot
fig, ax = plt.subplots(figsize=(figsize,figsize))
ax.plot(r,pot,'s',ms=0.3,label='Snapshot')
fitstr = 'Fit: $r_0 = {:.1f} \pm {:.1f}$ , $v_0 = {:.1f} \pm {:.1f}$'.format(r0fit,perr[1],v0fit,perr[0])
ax.plot(rsp,Phi(rsp,v0fit,r0fit),c='black',label=fitstr)
#ax.set_xlim(-lim,lim)
#ax.set_ylim(-lim,lim)
ax.set_xlabel('r [kpc]')
ax.legend()
plt.tight_layout()
ax.set_ylabel(r'$\Phi(r)$ [Arbitrary Units]')
#ax.set_title(r'$t=$' + "{:.2f}".format(time) + ' Myr')
plt.show()